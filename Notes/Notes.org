* What is Git?


** Version Control System (VCS)
   - Source code control system
   - Revision control system
   - Concurrent Versions System
   - Apache Subversion
   - BitKeeper SCM (distributed version control, community version)

** Git is born
   - Distributed
   - Open source and free software
   - Compatible with Unix-like systems
   - Github launched 2008, 2011 2M repositories, over 1M users

** Distributed version control
   - different users maintain their own
   - changes are stores as "change sets"
   - No single master repo, just many working copies

*** Pros
    - no need to communicate with a central server
    - encourage participation and "forking"
    - "loose groups" of open source developers

** Who should use Git
   - anyone wanting to track edits
   - anyone needing to share changes with collaborators
   - anyone not afraid of command-line tools
   - Programmers and Developers
   - Not as useful for tracking *non-text* files

* Git configuration
   - System, Users, Project
   - 

* Getting Started
 
** Initialize a repository
   - git init
   - ~echo "this is my first file" >> first_file.txt~
   - See the *.sh file for detailed codes

** Writing commit messages
   - short single-line summary
   - followed by a blank line and a more complete description
   - Keep each line to less than 72 characters
   - Write in present tense
   - Bullet points

*** Best practices
    - "Add missing > in project section of HTML" NOT Fix Typo
    - "Change user authentication to use Blowfish" NOT Update login code
    - *Provide a good labour of what is inside the commit*
    - MEMO: Write in present tense, note past tense.
    - It's not about you, it's about what the COMMIT does.
    - Use Emacs or Vim as your editor when you write your commit
      messages. "She can look at it, and see what it is." WHEN SHE
      DOES *git merge*.

** Viewing the commit log
   - git log; git log --help; git log -n 1; git log -n 2; git log -n 0
   - 


* Git concepts and architectures

** Three-tree architecture
   - Two-tree: repository, working
     - commit, checkout
   - Three-tree architecture
     - repository, staging index, working
     - git add file.txt, git commit file.txt
     - We can make changes to 10 files but you can JUST commit 5
       of 10. The rest files are still saved and waiting for your
       another commit.

** Git workflow
   - Git works with a set of files that makes of "change sets"
   - working --> staging index --> repository (~git commit~)
   - ~git add~ --> ~git commit~
   - ~git log~

** Using hash values
   - Git generates a checksum for each change set
   - data integrity is fundamental
   - Git uses SHA-1 hash algorithm to create checksums
   - Referring to commits

** Working with the HEAD pointer
   - point to the "tip" of current branch in repository
   - last state of repository
   - AKA: point to *parent of next commit*
   - Especially important in "branch" concepts.
     - *Checkout --> tip of the currently checked-out branch*

* Making changes to files

** Adding files
   - git status
   - echo "This is the second file" > second_file.txt
   - echo "This is the third file" > third_file.txt
   - git add second_file.txt; git status
   - git commit -m "Add second file to project"
   - git status; git log
   - git add third_file.txt
   - git commit -m "Add third file to project"
   - git status; git log

** Editing files
   - Modify your file
   - git status;
   - git add $The file you modified
   - git status
   - git commit -m "Made changed to second/bala bala files"

** Viewing changes with diff
   - git diff

** Viewing only staged changed
   - git diff --staged
   - If you need to commit, just add and commit

** Deleting files
   - echo "This is the file to delete" >> file_to_delete.txt
   - git add .
   - Add and commit those files (well, if you do bother)
   - How to delete:
     - Move it to the trash
     - git rm $file_to_remove (this is the one-step process)
   - Add and commit if neede

** Moving and renaming files
   - Do it manually and then add to stage
   - Let *git* do it for you.
     - git mv second_file.txt secondary_file.txt (this is just a
       sample code, use your own judgment in practice) (renaming)
     - git mv third_file.txt first_directory/third_file.txt (moving)
   - Add and commit if needed


* Using Git in a Real Project

** Introduce the Explore California web site
   - The above operations (add commit; status log; mv rm) consist of
     70% of daily workload. 
   
** Initializing Git
   - git init
   - git log
   - git add . (I prefer ~git add -A~)
   - git commit -m "Initial Commit"
   - git log

** Editing the support phone number
   - Use the "find all" in your favorite text editor/IDE to change the
     phone number (Regular Expression is to be discussed and learned later)
   - "more" "less" pager built into Unix. Highly recommend you use a
     "modern" text editor, aka, Emacs, Vim or ...
   - git commit -a (for new files and deleted files, this does not do
     well. ----Need to be verified on Git 2.0)

** Editing the backpack file name and links
   - "But I think it is better, (really?) to do the rename in
     command-line".
   - The staging and repository are for "Git" to use. You work in the
     "working" directory. This is important for "web-developers".
   - Rule of thumb: deal different changes as different commits.


* Undoing Changes
You know what?! I am going to undo what I changed.

** Undoing working directory changes
   - Kick it out or let it stay, it's a question.
   - git checkedout -- index.html (this is to stay on the same branch,
     without the "--" you may checkout the branch with the same name)
   - git status

** Unstaging files
   - You are trying to put together several commits
   - "Use the git reset HEAD <file>" to unstage
   - git reset HEAD resources.html
   - git status (use this often, this will help you a lot)

** Amending commits
   - "To generate its hash"----it's not recommended to change
     committed files, even just the commit message
   - git add resources.html
   - git commit -m "Rearrange the items to a trip"
   - make some changes to resources.html
   - git add resources.html
   - git commit --amend -m "Rearrange the items to bring on an outdoor
     trip" (*after the change, the hash value would be changed!*)
   - We only have the ability to AMEND the VERY LAST commit

** Retrieving old commits
   - Record the mistakes you made, and record the fix.
   - git status
   - We can checkout the file from before you've made that change.
   - git checkout $HASH_VALUE -- resources.html (use the -- to stay on
     the same branch, this will be explained later)
   - 

** Reverting a commit
   - Undo the changes of a commit, completely and totally.
   - git revert (will do the complete opposite of your commit)
   - git revert $HASH_VALUE (and hit RETURN)
   - Track your revert message (highly recommended)
   - After you revert, there is a NEW commit tracking your revert
     operation.
   - *What if the changes are really complicated?* (git merge) Like
     files renames, directories changed.
   - MERGE between the current branch and the new.

** Using reset to undo commits
   - Powerful but very dangerous.
   - git reset (specify where the HEAD pointer should point to)
   - "I want to be in control, I want to move the HEAD pointer HERE"
   - It does the same thing as "*rewind the record tape*"
   - git reset
     - ~soft~ does not change staging index or working directory
     - ~mixed~ default, changes the staging index to match repository,
       does not change working directory
     - ~hard~ changes staging index and working directory to match
       repository (EXTREMELY DANGEROUS, BE CAUTIOUS)

** Demonstrating a soft reset
   - "Rewind back in time to BEFORE this version"
   - git reset --soft $SOME_OTHER_HASH_VALUE
   - git diff --staged (do not destructively get rid of our changes)
   - git reset --soft $HASH_VALUE (this refers to the commit you want
     to "go back" again)

** Demonstrating a mixed reset
   - Makes the staging reset looks the same.
   - git reset --mixed $SOME_OTHER_HASH_VALUE
   - These changes are NOT GONE! They are still in our working directory.
   - Now you can go and modify and make those changes again.
   - git add .
   - git status
   - One terminology, *Finite State Machine*.
   - 

** Demonstrating a hard reset
   - Rewind the HEAD pointer, and throw out everything after that
     (that means after the commit you reset)
   - "I do not want everything that happened after that. I JUST WISH
     TO GO BACK!!!"
   - git reset --hard $SOME_OTHER_HASH_VALUE
   - git log
   - git status
   - *But those old commits are still there!* You can still use the
     ~git reset --hard $HASH_VALUE~ go back.
   - Do some modifications.
   - git commit -am "Moved sunglasses higher in list of suggested
     outdoor items"
   - *Just be careful when you use them!* They do allow you to
     overwrite data

** Removing untracked files
   - Create some junk files
   - ~git clean~
   - git clean -n; git clean -f (throw away the untracked files, they
     will be permanently deleted)

* Ignoring files

** Using .gitignore files
   - What if it's a temporary file or a log file? Just tell git to
     ignore the file ALL-TOGETHER.
   - create (or auto-create project/.gitignore)
   - very basic regular expressions
   - negate expressions with "!"
   - ignore all files in a directory with a trailing slash, like
     "assets/videos/"
   - And all these go back to the good old Command-Line shit. (Aka,
     shellcript and bala bala)
*** Example
    - nano .gitignore
      - tempfile.txt, and hit "RETURN"
    - git status
    - .DS_Stores *.zip *.gz log/*.log log/*.login.[0-9] assets/videos/
      assets/photoshop/ !assets/videos/tour_*.mp4 (sample .gitignore
      content)
    - git add .gitignore
    - git commit -m "Add .gitignore file"

** Understanding what to ignore
   - Compiled source code
   - Packages and compressed files
   - Logs and databases
   - Operating system generated files
   - user-uploaded assets (images, PDFs, videos)
   - https://htlp.github.com/articles/ignoring-files
   - https://github,com/github/gitignore

** Ignoring files globally
   - ignore files in all repositories
   - settings not tracked in repository
   - user-specific instead of repository-specific
   - Add/Edit the global ignore files, and then use the following
     command to configure
   - git config --global core.excludesfile ~/.gitignore_global (the
     filename differs as you want)

** Ignoring tracked files
   - git add tempfile2.txt
   - git commit -m "Add tempfile2.txt to working directory"
   - "So I am going to use the command line :) "
   - "What if we want to leave it in our repository?"
   - git rm --cached tempfile2.txt (SEARCH THE FUCKING WEB, AND READ
     THE FUCKING MANUAL)
   - More changes made to tempfile2.txt will *not* be tracked. Because
     it has been removed from the staging index, aka, the cache.

** Tracking empty directory
   - cd $YOUR_WORKING_FOLDER && mkdir $SOME_NEW_EMPTY_FOLDER
   - cd $SOME_NEW_EMPTY_FOLDER && *touch .gitkeep*
   - How-todo: Just add some empty files in the directory which you
     want git to track. As simple as that.
   - No matter how small, it has to be a file, so the directory is NOT
     empty. 

* Navigating the Commit Tree

** Referencing commits
   - Tree-ish
     - full SHA-1 hash
     - short SHA-1 hash, at least 4 characters, unambiguous (8-10
       characters)
   - HEAD pointer
   - branch reference, tag reference (It seems that TAG is extremely
     popular)
   - parent commit
     - HEAD^, HEAD~1, master^, HEAD~
   - grandparent commit
     - HEAD^^, HEAD~2
   - great-grandparent commit
     - HEAD^^^, HEAD~3 (tide notation is more, well, compact)

** Exploring tree listings
   - pwd; ls -al
   - git ls-tree
   - git ls-tree master assets/
   - git ls-tree master~1 assets/ (guess what a tree is? A tree is a
     DIRECTORY! This clearly explains the tree-ish notation.)

** Getting more from the commit log
   - git log --oneline
   - git log --oneline -3
   - git log --oneline -5 (how many logs to be shown)
   - git log --since="2012-06-20"
   - git log --until="2012-06-20"
   - git log --since="2 weeks ago" --until="3 days ago" (2.weeks
     3.days)
   - git log --author="Kevin" (nice to filter out when collaborate
     with other people)
   - git log --grep="temp"
   - *You can see now why good commit messages is very helpful!* It
     can help you search.
   - git log $HASH_VALUE..$SOME_OTHER_HASH_VALUE index.html (or some
     specific file)
   - git log -p (p for patch to show the difference) It is recommended
     to combine some of those commands.
   - git log --stat --summary (idea of quantities changes)
   - *Pretty Cool* git log --graph ; git log --oneline --graph --all
     -- decorate
   - DIG TO THE LOG FILES, READ AND PRACTICE MORE, PLEASE!

** Viewing Commits
   - git log --oneline
   - git show $HASH_VALUE (of your specific commit)
   - git show --format=oneline HEAD~2
   - git show --format=oneline HEAD~3
   - git ls-tree master
   - git show $HASH_VALUE (of your tree/blobs/etc)
   - use *git show --help* to find more of your concern

# Life is a bitch, fuck it or leave it, choose one. I choose to fuck
# it and graduate as normal in the United Arab Emirates.

** Comparing Commits
   - Compare the "directory" of that commit
   - use *git status* and for remote management *git pull* often is a
     good habit
   - git diff --staged; git diff --cached
   - "The diff tool is very flexible."
   - git log --oneline; git diff $HASH_VALUE (of tree-ish stuff)
   - "We can compare where we are now and what's different in the
     past"
   - As in Xnix system, you can use the good old "git diff" to compare
     *two* or more things. By the way, READ THE FUCKING MANUAL.
   - git diff --stat --summary $SOME_OTHER_HASH_VALUE..HEAD
     (--ignore-space-change --ignore-all-space -b (ignore space
     changes) -w (ignore all spaces))

* Branching
One of the most powerful features in Git

** Branching overview
   - branches are cheap
     - try new ideas
     - isolate features or sections of work. When all is finished, we
       can merge it into "master" branch.      
   - One working directory.
   - fast context switching.
     - master...some other features...merge (will create a new commit)
   - We could have mini branches and merge more often.

** Viewing and creating branch
   - git branch; cat .git/HEAD; ls -al .git/refs/heads
   - cat .git/refs/head/master
   - *Create a new branch* git branch $BRANCH_NAME (stay away from
     punctuation); ls -al .git/refs/heads
   - cat .git/refs/heads/$BRANCH_NAME
   - cat .git/HEAD

** Switching branches
   - "We do that by checking out the branch"
   - git checkout $BRANCH_NAME; cat .git/HEAD;
   - git status; git commit -am "Modified title of bala bala"; git log
     --oneline
   - git checkout master; git log --oneline (Branching when needed,
     but not when you "feel like". Use your own judgment)
   - It's that easy to swap out files and folders when you have
     multiple branches, just check it out.

** Create and Switch Branches
   - pwd; git log --oneline; git show HEAD
   - git checkout -b $BRANCH_NAME (checkout and switching at the same
     time) *Give your branch useful and meaningful name*
   - git branch; git log --oneline;
   - Re: git checkout -- <file> ("--" just keeps you in this working
     branch, so you do not mess it up)
   - git add $SOME_FILES; git commit -m "Your commit message"; git log
     --oneline
   - git checkout master; git log --graph --oneline --decorate --all
     (You really understand how the switching works and you really
     should feel comfortable with it. Because this is normal when you
     begin to, well ,work)

** Switching branches with uncommitted changes
   - checkout (go and get the latest branch, so your working directory
     must be clean to do that)
   - git status; make some changes to your files; git status;
   - git checkout master (Commit your changes or stash them *before*
     *you can switch branches*)
   - Possible options:
     - ~checkout -- <file>~ to discard changes
     - commit; git commit -am "Swap out - for : in index.html title"
     - stash
   - You cannot have anything that may *lose* data when switch branch!
     (Empty file or those that do not violate this rule)

** Compare branches
   - git diff $NAME_OF_BRANCHES; git diff master..new_features
   - git diff master..some_other_branch
   - git diff --color-words branch1..branch2
   - "*tree-ish*" concept in git
   - git branch --merged (checkout some different branches and use
     this command to see what will happen)
   -

** Renaming branches
   - pwd; git branch
   - git diff master..branch1;
   - Rename branch: git branch -m branch1 renamed_branch1; (git
     considers rename as mv, the same way as Xnix does)
   - Give your branch *meaningful names* that help you distinguish
     what the commits are all about!


# Life is a bitch, fuck it or leave it, choose one.
** Deleting branches
   - git branch branch_to_delete; (born to be deleted)
   - git branch -d branch_to_delete
   - git branch (check whether it is still there)
   - git branch branch_to_delete;
   - git checkout branch_to_delete; git branch -d branch_to_delete;
     (this operation would failed because you CANNOT delete the branch
     which you are currently on.)
   - "The branch 'branch_to_delete' is not fully merged! If you are
     sure you want to delete it, run 'git branch -D branch_to_delete'"
   - *Read the fucking Manual* man! Be a real professional, work hard
     and fight for a bright future. (Commented by Abraham)

** Configuring the command prompt to show the branch
   - Not necessary, but most Git developers choose to do this.
   - There are some configurations in your shell config file. Do it at
     your own wish.

* Merging branches

** Merging code
   - Pull request and merge operation.
   - First, check out the "receiver"
   - git checkout master; git merge $SOME_BRANCH
   - git diff master..$SOME_BRANCH (see if there are still some
     differences) 
   - git branch --merged
   - You always want to run "git merge" with a clean working directory

** Using fast-forward merge v.s. true merge
   - Fast-forward: move the commit along the timeline, then move the
     HEAD pointer.
   - git merge --no-ff branch; (You do not want to merge quietly, you
     want to log something)
   - Non-fast-forward merge: when the HEAD pointer is not in the
     current branch (practice more to feel)
   - git merge $SOME_OTHER_BRANCH
   - Merge has different strategies for merging.


** Merging conflicts
   - Git cannot decide which one to use or how to merge them
     together.
   - Example:
     - <span>Git is great.</span>
     - <strong>Git is great.</strong>
     - <em>Git is great.</em> (Yet another branch, so HOW TO MERGE)
   - Make some changes to an existing file. (So to confuse the stupid
     Version Control.)
   - Automatic merge failed! *Fix conflicts* and then commit the
     result.
   - It's up to you to pick (or choose) which one to useful, aka to
     merge when there are "REAL" conflicts.

** Resolving merge conflicts
   - git merge --abort (You have to do something, or the conflict(s)
     are still there)
   - *Resolve those conflicts manually* Use your own judgment to
     resolve the conflict. Some are to be kept, others to be
     discarded.
   - It's more "advanced" to use those merge tools.

*** Abort, resolve manually or use a merge tool

** Exploring strategies to reduce merge conflicts
   - Keep lines short.
   - Keep commits small and focused.
   - Beware stray edits to whitespace.
     - spaces, tabs, line returns.
   - Merge often so the *conflicts are smaller to resolve*.
   - The most important: Track changes to master, (aka, *git pull*)

* Stashing changes

** Saving changes in the stash
   - 














     
























































         




